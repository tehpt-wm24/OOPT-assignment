import java.util.ArrayList;
import java.util.Scanner;

public class GuestsController {
	private static final String RESET = "\u001B[0m";
    private static final String RED = "\u001B[31m";
    private static final String GREEN = "\u001B[32m";
    private static final String BLUE = "\u001B[34m";
    private static final String CYAN = "\u001B[36m";
    private static final String YELLOW = "\u001B[33m";
    private static final String PURPLE = "\u001B[35m";

	public static void manageGuests(ArrayList<Guest> guests, Scanner scanner) {
		boolean exit = false;
		while(!exit) {
			System.out.println(CYAN + "\n=== Welcome to Guest Management Menu ===" + RESET);
			System.out.println(BLUE + "1. Show All Guests");
			System.out.println(BLUE + "2. Edit Guest");
			System.out.println(BLUE + "3. Delete Guest" + RESET);
			System.out.println(RED + "4. Back to Guest Menu" + RESET);

			int choice = getValidIntInput(scanner, BLUE + "Choose an option (1-4): " + RESET, 1,4);

			switch(choice) {
				case 1:
					showAllGuests(guests, scanner);
					break;
				case 2:
					editGuest(guests, scanner);
					break;
				case 3:
					deleteGuest(guests, scanner);
					break;
				case 4:
					exit = true;
					break;
				default:
					System.out.println(RED + "ERROR: Invalid input! Please enter a valid number." + RESET);
			}
		}
	}

	private static void displayGuests(ArrayList<Guest> guests) {
		System.out.println(CYAN + "\n=== All Guests ===" + RESET);
		System.out.println(CYAN + "--------------------------------" + RESET);
		
		for (Guest guest : guests) {	
			System.out.printf("Guest ID: %04d\n", guest.getGuestId());
			System.out.println("Name: " + guest.getName());
            System.out.println("Contact: " + guest.getContact());
            System.out.println("Nationality: " + guest.getNationality());
            if (guest.getSpecialRequests() != null && !guest.getSpecialRequests().isEmpty()) {
                System.out.println("Special Requests: " + guest.getSpecialRequests());
            }
            System.out.println("Discount: " + guest.getDiscount() + "%");
			System.out.println(CYAN + "--------------------------------" + RESET);
		}
	}

	public static void addNewGuest(ArrayList<Guest> guests, Scanner scanner) {
		int guestId = guests.size() + 1; 
		String formattedId = String.format("%04d", guestId); // 4-digit format with leading zeros
	    System.out.printf(YELLOW + "\nAssigned Guest ID %04d -->" + formattedId + RESET);
		
		String name;
    	do {
        	System.out.print(BLUE + "Enter name: " + RESET);
	        name = scanner.nextLine().trim();
    	    if (name.isEmpty()) {
        	    System.out.println(RED + "ERROR: Name cannot be empty!" + RESET);
        	}
	    } while (name.isEmpty());
    
		long contact = getValidLongInput(scanner, BLUE + "Enter contact (8-12 digits): " + RESET, 10000000L, 999999999999L);
		String nationality = getNationalityInput(scanner);		
		System.out.print(BLUE + "Enter special requests (press Enter to skip): " + RESET);
		String specialRequests = scanner.nextLine().trim();
	
		int discount = 0;
		while (true) {
			System.out.print(BLUE + "Enter discount (0-100, or press Enter to skip): " + RESET);
			String discountInput = scanner.nextLine();
	
			if (discountInput.isEmpty()) {
				discount = 0;
				break;
			}
	
			try {
				discount = Integer.parseInt(discountInput);
				if (discount < 0 || discount > 100) {
					System.out.println(RED + "ERROR: Discount must be between 0 and 100." + RESET);
				} else {
					break;
				}
			} catch (NumberFormatException e) {
				System.out.println(RED + "ERROR: Invalid discount! Please enter a valid integer." + RESET);
			}
		}
	
		Guest guest = new Guest(guestId, name, contact, nationality, specialRequests, discount);
		guests.add(guest);
		System.out.println(GREEN + "\nGuest added successfully. \nAssigned ID: " + formattedId + RESET);
	}
	
	// Method to display nationality choices and get the user's input
	private static String getNationalityInput(Scanner scanner) {
		String[] nationalities = {CYAN + "Malaysia", "Singapore", "Thailand", "Indonesia", "India", "China" + RESET};
		
		System.out.println(BLUE + "Select nationality from the list:" + RESET);
		for (int i = 0; i < nationalities.length; i++) {
			System.out.println((i + 1) + ". " + nationalities[i]);
		}
	
		int choice;
		while (true) {
			choice = getValidIntInput(scanner, BLUE + "Enter your choice (1-" + nationalities.length + "): " + RESET, 1, nationalities.length);
			
			if (choice >= 1 && choice <= nationalities.length) {
				break;
			} else {
				System.out.println(RED + "ERROR: Invalid choice! Please try again." + RESET);
			}
		}
	
		return nationalities[choice - 1];
	}
	
	public static void showAllGuests(ArrayList<Guest> guests, Scanner scanner) {
		
		System.out.println(CYAN + "\n=== Search Guests ===" + RESET);
		System.out.println(BLUE + "1. Search for a guest by name" + RESET);
		System.out.println(YELLOW + "2. Show all guests" + RESET);
		int choice = getValidIntInput(scanner, BLUE + "Enter your choice (1 or 2): " + RESET, 1, 2);
	
		if (choice == 1) {
			showGuestByName(guests, scanner);
		} else {
			displayGuests(guests);
		}
	}

	public static boolean showGuestByName(ArrayList<Guest> guests, Scanner scanner) {
    	System.out.print(BLUE + "Enter guest name to search (partial match allowed): " + RESET);
    	String name = scanner.nextLine().trim();
    	boolean found = false;
    
	    if (name.isEmpty()) {
    	    System.out.println(RED + "ERROR: Search term cannot be empty!" + RESET);
        	return false;
    	}

	    System.out.println(CYAN + "\n=== Search Results ===" + RESET);
    	for (Guest guest : guests) {
        	if (guest.getName().toLowerCase().contains(name.toLowerCase())) {
            	System.out.println(CYAN + "--------------------------------" + RESET);
	            System.out.printf("Guest ID: %04d\n", guest.getGuestId());
	            System.out.println("Name: " + guest.getName());
    	        System.out.println("Contact: " + guest.getContact());
        	    System.out.println("Nationality: " + guest.getNationality());
    	        if (guest.getSpecialRequests() != null && !guest.getSpecialRequests().isEmpty()) {
        	        System.out.println("Special Requests: " + guest.getSpecialRequests());
            	}
	            System.out.println("Discount: " + guest.getDiscount() + "%");
    	        System.out.println(CYAN + "--------------------------------" + RESET);
        	    found = true;
        	}
    	}

	    if (!found) {
    	    System.out.println(RED + "ERROR: No guests found matching: " + name + RESET);
	    }
    	return found;
	}

	public static void editGuest(ArrayList<Guest> guests, Scanner scanner) {
		try {
			System.out.print(YELLOW + "\nEdit Guest --> ");

	    	if (guests.isEmpty()) {
    	    	System.out.println(RED + "ERROR: Search term cannot be empty. Please try again." + RESET);
        		return;
    		}

		    displayGuests(guests);

	    	int minId = guests.stream().mapToInt(Guest::getId).min().orElse(0001);
			int maxId = guests.stream().mapToInt(Guest::getId).max().orElse(0001);
        	int guestId = getValidIntInput(scanner, BLUE + "Enter guest ID to edit (" + minId + "-" + maxId + ", -1 to cancel): " + RESET, minId, maxId);

			if (guestId == -1) {
				System.out.println(YELLOW + "Edit cancelled." + RESET);
				return;
			}

			System.out.println(YELLOW + "=== Available Guest ID ===" + RESET);
            System.out.println(YELLOW + " [ Range: " + RESET + minId + YELLOW + " - " + RESET + maxId + YELLOW + " ]" + RESET);
	
			Guest guestToEdit = null;
    	    for (Guest g : guests) {
    		    if (g.getGuestId() == guestId) {
        		    guestToEdit = g;
            		break;
    			}
			}
		
			if (guestToEdit == null) {
				System.out.println(RED + "Guest with ID " + String.format("%04d", guestId) + " not found!" + RESET);
				return;
			}

			editGuestDetails(guestToEdit, scanner);

		} catch (Exception e) {
			System.out.print(RED + "\nError editing guest: " + e.getMessage());
			System.out.println(RED + ". Please try again." + RESET);
		}
	}
	
	private static void editGuestDetails(Guest guest, Scanner scanner) {
		System.out.println(YELLOW + "\nEditing Guest ID: " + String.format("%04d", guest.getGuestId()) + RESET);
		// Name
		System.out.println(PURPLE + "\n\tCurrent Name: " + guest.getName() + RESET);
		String name = getValidStringInput(scanner, BLUE + "Enter new name (-1 to keep current): " + RESET);
		if (!name.equals("-1")) {
			guest.setName(name);
		}
	
		// Contact
		System.out.println(PURPLE + "\n\tCurrent Contact: " + guest.getContact() + RESET);
		while (true) {
			System.out.print(BLUE + "Enter new contact (8-12 digits, -1 to keep current): " + RESET);
			String input = scanner.nextLine().trim();

			if (input.equals("-1")) break;

			try {
				long contact = Long.parseLong(input);
				if (contact >= 10000000L && contact <= 999999999999L) {
					guest.setContact(contact);
					break;
				}
				System.out.print(RED + "ERROR: Contact must be 8-12 digits! Please try again." + RESET);
			} catch (NumberFormatException e) {
				System.out.println(RED + "ERROR: Invalid number! Please try again." + RESET);
			}
		}
	
		// Nationality
		System.out.println(PURPLE + "\n\tCurrent Nationality: " + guest.getNationality() + RESET);
		System.out.println(BLUE + "Select new nationality:" + RESET);
		String[] nationalities = {BLUE + "Malaysia", "Singapore", "Thailand", "Indonesia", "India", "China", "Others" + RESET};
		for (int i = 0; i < nationalities.length; i++) {
			System.out.println((i+1) + ". " + nationalities[i]);
		}
			
		while (true) {
			System.out.print(BLUE + "Enter choice (1-7, -1 to keep current): " + RESET);
			String input = scanner.nextLine().trim();

			if (input.equals("-1")) break;
			
			try {
				int choice = Integer.parseInt(input);
				if (choice >= 1 && choice <= 7) {
					guest.setNationality(nationalities[choice - 1]);
					break;
				}
				System.out.print(RED + "ERROR: Invalid choice! Please try again." + RESET);
			} catch (NumberFormatException e) {
				System.out.println(RED + "ERROR: Invalid number! Please try again. " + RESET);
			}
		}
	
		// Special Requests
		System.out.println(PURPLE + "\n\tCurrent Special Requests: " + (guest.getSpecialRequests() == null || guest.getSpecialRequests().isEmpty() ? "None" : guest.getSpecialRequests()) + RESET);
		System.out.println(BLUE + "Enter new special requests (-1 to keep current, or press Enter to clear): " + RESET);
		String requests = scanner.nextLine().trim();
		if (!requests.equals("-1")) {
			guest.setSpecialRequests(requests.isEmpty() ? null : requests);
		}
	
		// Discount
		System.out.println(PURPLE + "\n\tCurrent Discount: " + guest.getDiscount() + "%" + RESET);
		while (true) {
			System.out.print(BLUE + "Enter new discount (0-100, -1 to keep current, or press Enter to clear): " + RESET);
			String input = scanner.nextLine().trim();

			if (input.equals("-1")) {
        		break; // Keep current
    		}
	    	if (input.isEmpty()) {
    	    	guest.setDiscount(0); // Clear discount
        		break;
    		}

			try {
				int discount = Integer.parseInt(input);
				if (discount >= 0 && discount <= 100) {
					guest.setDiscount(discount);
					break;
				}
				System.out.print(RED + "ERROR: Discount must be 0-100! Please try again." + RESET);
			} catch (NumberFormatException e) {
				System.out.println(RED + "ERROR: Invalid number! Please try again." + RESET);
			}
		}
		
		System.out.println(YELLOW + "\nGuest data updated successfully!" + RESET);
	}

	public static void deleteGuest(ArrayList<Guest> guests, Scanner scanner) {
		try {
			displayGuests(guests);
			int minId = 1;
        	int maxId = guests.size();
			int guestId = getValidIntInput(scanner, String.format(BLUE + "Enter guest ID to delete (%04d-%04d, -1 to cancel): " + RESET, minId, maxId), -1, maxId);

			if (guestId == -1) {
				System.out.println(YELLOW + "Deletion cancelled." + RESET);
				return;
			}

			System.out.println(YELLOW + "=== Available Guest ID ===" + RESET);
            System.out.println(YELLOW + " [ Range: " + RESET + minId + YELLOW + " - " + RESET + maxId + YELLOW + " ]" + RESET);
	
			Guest guestToDelete = null;
        	for (Guest g : guests) {
            	if (g.getGuestId() == guestId) {
                	guestToDelete = g;
	                break;
    	        }
        	}

	        if (guestToDelete == null) {
    	        System.out.println(RED + "ERROR: Guest not found!" + RESET);
        	    return;
        	}
	
			System.out.println(CYAN + "\n=== Guest to delete ===" + RESET);
			System.out.println(CYAN + "--------------------------------" + RESET);
			System.out.printf("Guest ID: %04d\n", guestToDelete.getGuestId());
			System.out.println(guestToDelete);
			System.out.println(CYAN + "--------------------------------" + RESET);
			
			if (getYesNoInput(scanner, BLUE + "Are you sure you want to delete this guest? (Y/N): " + RESET)) {
				guests.remove(guestToDelete);
				System.out.printf(RED + "Guest " + String.format("%04d", guestId) + " deleted successfully." + RESET);
			} else {
				System.out.println(YELLOW + "Deletion cancelled." + RESET);
			}
		} catch (Exception e) {
			System.out.print(RED + "Error deleting guest: " + e.getMessage() + RESET);
			System.out.println(RED + ". Please try again." + RESET);
		}
	}

	public static Guest getGuestById(int id, ArrayList<Guest> guests) {
		if (guests == null || guests.isEmpty()) {
			System.out.println(YELLOW + "Warning: Guests list is empty!" + RESET);
			return null;
		}
		
		for (Guest guest : guests) {
			if (guest.getGuestId() == id) {
				return guest;
			}
		}
		return null;
	}
	
	private static int getValidIntInput(Scanner scanner, String prompt, int min, int max) {
		while (true) {
			try {
				System.out.print(prompt);
				int value = Integer.parseInt(scanner.nextLine());
				if (value >= min && value <= max) {
					return value;
				}
				System.out.printf(RED + "ERROR: Input must be between %d and %d. Please try again.\n" + RESET, min, max);
			} catch (NumberFormatException e) {
				System.out.println(RED + "ERROR: Invalid input! Please enter a valid integer." + RESET);
			}
		}
	}
	
	private static String getValidStringInput(Scanner scanner, String prompt) {
		String input;
		do {
			System.out.print(prompt);
			input = scanner.nextLine().trim();
			if (input.isEmpty()) {
				System.out.println(RED + "ERROR: Input cannot be empty. Please try again." + RESET);
			}
		} while (input.isEmpty());
		return input;
	}

	private static long getValidLongInput(Scanner scanner, String prompt, long min, long max) {
		while (true) {
			try {
				System.out.print(prompt);
				long value = Long.parseLong(scanner.nextLine());
				if (value >= min && value <= max) {
					return value;
				}
				System.out.printf(RED + "ERROR: Input must be between %d and %d. Try again.\n" + RESET, min, max);
			} catch (NumberFormatException e) {
				System.out.println(RED + "ERROR: Invalid input! Please enter a valid number." + RESET);
			}
		}
	}
	
	private static boolean getYesNoInput(Scanner scanner, String prompt) {
		while (true) {
			System.out.print(prompt);
			String input = scanner.nextLine().trim().toLowerCase();
			if (input.equals("y") || input.equals("yes")) {
				return true;
			}
			if (input.equals("n") || input.equals("no")) {
				return false;
			}
			System.out.println(RED + "ERROR: Invalid input! Please enter Y/y or N/n." + RESET);
		}
	}
}
